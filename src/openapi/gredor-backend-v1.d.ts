/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/submission-flow/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Prepare */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PreparationRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SkapaTokenOK"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/submission-flow/submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SubmissionRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InlamningOK"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/submission-flow/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ValidationRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["KontrolleraSvar"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Handlingsinfo: {
            typ?: components["schemas"]["TypEnum1"];
            /** Format: int32 */
            dokumentlangd?: number;
            idnummer?: string;
            /** Format: binary */
            sha256checksumma?: string;
        };
        InlamningOK: {
            orgnr?: string;
            avsandare?: string;
            undertecknare?: string;
            handlingsinfo?: components["schemas"]["Handlingsinfo"];
            url?: string;
        };
        KontrolleraSvar: {
            orgnr?: string;
            utfall?: components["schemas"]["KontrolleraUtfall"][];
        };
        KontrolleraUtfall: {
            kod?: string;
            text?: string;
            typ?: components["schemas"]["TypEnum"];
            tekniskinformation?: components["schemas"]["KontrolleraUtfallTekniskInformation"][];
        };
        KontrolleraUtfallTekniskInformation: {
            meddelande?: string;
            element?: string;
            varde?: string;
        };
        /** Format: date */
        LocalDate: string;
        PreparationRequest: {
            companyOrgnr: string;
            signerPnr: string;
            /** Format: binary */
            signedPdf: string;
        };
        SkapaTokenOK: {
            token?: components["schemas"]["UUID"];
            avtalstext?: string;
            avtalstextAndrad?: components["schemas"]["LocalDate"];
        };
        SubmissionRequest: {
            companyOrgnr: string;
            signerPnr: string;
            /** Format: binary */
            signedPdf: string;
            /** Format: binary */
            ixbrl: string;
            notificationEmail: string;
        };
        /** @enum {string} */
        TypEnum: "info" | "warn" | "error";
        /** @enum {string} */
        TypEnum1: "arsredovisning_komplett" | "arsredovisning_kompletteras" | "revisionsberattelse";
        /** Format: uuid */
        UUID: string;
        ValidationRequest: {
            companyOrgnr: string;
            signerPnr: string;
            /** Format: binary */
            signedPdf: string;
            /** Format: binary */
            ixbrl: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
